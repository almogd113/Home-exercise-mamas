חלק שלישי  – תכנות מונחה עצמים
1. עיקרון הכימוס: Encapsulation הוא עיקרון הדולג בייחודיות ובתפקיד של כל אובייקט בפרויקט. לכל אחד מהאובייקטים יש תכונות (Data members) או properties שהם מייצגים אותו ולכל אחד מהם יש modifer access כלומר הרשאת גישה לנתונים הללו. לכל אחד מהאובייקטים יש גישה מוגבלת לשאר המידע של אובייקטים אחרים (תלוי בעיצוב התוכנה) והמטרה היא ליצור הפרדה ויצירת בידול בין המחלקות, ככה ששינוי באחת לא פוגם באחרת וניתן ליצור תוכנה שתהיה מודלרית וקלה לשינוי. לדוגמה אם אני רוצה לשנות משהו במימוש מחלקה מסויימת ואני משתמש באחת הפונקציות שבה במחלקה אחרת זה לא פוגם לי במחלקה שבה אני משתמשת בפונקציה ולהפך. המימוש לא משפיע על השימוש. בנוסף, הרעיון הכללי הוא להסתיר ולחשוף מידע בהתאם לצורכי עיצוב התוכנה ולהחלטת המפתח. יש נתונים שלא נרצה לחשוף לכלל המחלקות ושיהיה ניתן לשנותם.
2. מה ההבדל בין מחלקה למחלקה אבסטרקטית?
מחלקה רגילה - היא מחלקה שניתן לייצר ממנה מופעים וכל מופע שלה מייצג אובייקט ספיציפי מסוג המחלקה. 
מחלקה אבסטרקטית - מחלקה אשר התפקיד שלה הוא יותר מופשט והיא להוות איזשהו גורם מקשר בין כמה מחלקות כלומר אם יש תכונה שמשותפת לכמה מחלקות אז ניתן ליצור מחלקה אבסטרקטית שהיא מייצגת את הגורם המשותף הזה וכל מחלקה יורשת ממנה היא נחשבת גם מסוג המחלקה שלה וגם מסוג המחלקה האבסטרקטית. ולכן למחלקה אבטסרקטית לא ניתן ליצור מופעים כי היא כביכול מופשטת. 
3. מה ההבדל בין מחלקה למחלקה סטטית?
מחלקה רגילה - היא מחלקה שניתן לייצר ממנה מופעים וכל מופע שלה מייצג אובייקט ספיציפי מסוג המחלקה. 
מחלקה סטטית - היא מחלקה אשר לא ניתן ליצור מופעים שלה או לרשת ממנה וכל הdata members הmethods שלה הן סטטיות כלומר הן לא שייכות למופע ספציפי אחד אלה לכל המחלקה. המחלקה הסטטית משמשת בעיקר משמשת ליצירת מחלקות עזר למפתח כאלה שאין משמעות לאובייקט אותו יוצרים אלה פשוט להשתמש בפעולות שיצרנו שם. לאיגוד כל הפעולות, התכונות הסטטיות הקשורות למחלקה שיצרנו. 
4. מי יכול לגשת לmembers בעלי access modifier של internal ?
internal  נותן גישה רק לכל הקבצים בפרויקט הנוכחי. במידה ונרצה לעשות פרויקט גדול שמשלב בתוכו שני פרויקטים, הmembers שהוגדרו internal יהיו זמינים רק בפרויקט הנוכחי ולא בשני. אם רוצים שתהיה גישה כללית לכל פרויקט צריך להגדיר public